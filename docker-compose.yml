version: '3.8'

services:
  # ==========================================
  # FRONTEND SERVICE
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=https://hunerly.com/api
    container_name: huner-frontend
    restart: unless-stopped
    ports:
      - "8090:80"
    environment:
      - VITE_API_URL=https://hunerly.com/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - huner-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # BACKEND SERVICE
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: huner-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      
      # Database
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=123456
      - DB_NAME=huner_db
      
      # JWT
      - JWT_SECRET=huner_super_secret_key_production_2024_change_this
      - JWT_EXPIRE=7d
      
      # File Upload
      - MAX_FILE_SIZE=10485760
      - UPLOAD_PATH=./uploads
      
      # Email
      - EMAIL_HOST=smtp.hostinger.com
      - EMAIL_PORT=465
      - EMAIL_USER=info@hunerly.com
      - EMAIL_PASS=1453Abdullah.
      - EMAIL_FROM=info@hunerly.com
      
      # Frontend URL (CORS iÃ§in)
      - FRONTEND_URL=https://hunerly.com
      
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - huner-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # MYSQL DATABASE
  # ==========================================
  mysql:
    image: mysql:8.0
    container_name: huner-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=huner_db
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      # - ./backend/huner_db.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "3307:3306"
    networks:
      - huner-network
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max-connections=200
      - --max-allowed-packet=64M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # PHPMYADMIN (Opsiyonel)
  # ==========================================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: huner-phpmyadmin
    restart: unless-stopped
    ports:
      - "8161:80"
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_USER=root
      - PMA_PASSWORD=123456
      - UPLOAD_LIMIT=64M
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - huner-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==========================================
# NETWORKS
# ==========================================
networks:
  huner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# VOLUMES
# ==========================================
volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local